from aiogram.types import Message, BufferedInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from PIL import Image, ImageDraw, ImageFont
import io
import logging
import re
from messages import get_back_menu, get_main_menu, WELCOME_MSG

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_SIZE = 5000
SUPPORTED_FORMATS = ['jpg', 'jpeg', 'png', 'gif', 'bmp']
DEFAULT_COLOR = (255, 255, 255)  # –ë–µ–ª—ã–π
TEXT_COLOR = (0, 0, 0)  # –ß–µ—Ä–Ω—ã–π

class ImageGeneratorStates(StatesGroup):
    waiting_for_format = State()
    waiting_for_params = State()
    waiting_for_choice = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è

async def generate_image_command(message: Message, state: FSMContext):
    await state.set_state(ImageGeneratorStates.waiting_for_format)
    
    format_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="JPG"), KeyboardButton(text="PNG")],
            [KeyboardButton(text="GIF"), KeyboardButton(text="BMP")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
        reply_markup=format_keyboard
    )

async def process_format_choice(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        from messages import MENU_MSG, get_main_menu  # –ò–∑–º–µ–Ω–µ–Ω–æ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MENU_MSG –≤–º–µ—Å—Ç–æ WELCOME_MSG
        await message.answer(MENU_MSG, reply_markup=get_main_menu())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MENU_MSG
        return
      
    format_map = {
        "JPG": "jpg",
        "PNG": "png",
        "GIF": "gif",
        "BMP": "bmp"
    }
    
    if message.text not in format_map:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return
    
    await state.update_data(format=format_map[message.text])
    await send_size_prompt(message, state)

async def send_size_prompt(message: Message, state: FSMContext):
    data = await state.get_data()
    selected_format = data['format']
    
    examples = {
        "jpg": "300 #FF5733 (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç)\n800 600 (–±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)",
        "png": "500 (–∫–≤–∞–¥—Ä–∞—Ç 500x500)\n1024 768 #00FF00 (–∑–µ–ª–µ–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)",
        "gif": "200 #FFFF00 (–∂–µ–ª—Ç—ã–π –∫–≤–∞–¥—Ä–∞—Ç)\n400 400 (–±–µ–ª—ã–π –∫–≤–∞–¥—Ä–∞—Ç)",
        "bmp": "300 300 #0000FF (—Å–∏–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç)\n600 400 (–±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)"
    }[selected_format]
    
    await message.answer(
        f"üñº –í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{selected_format.upper()}</b> —Ñ–æ—Ä–º–∞—Ç\n\n"
        "üìè –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n"
        "‚Ä¢ <code>—Ä–∞–∑–º–µ—Ä</code> - –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "‚Ä¢ <code>—à–∏—Ä–∏–Ω–∞ –≤—ã—Å–æ—Ç–∞</code> - –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ #RRGGBB\n\n"
        "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
        f"<code>{examples}</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"<code>500</code> - –∫–≤–∞–¥—Ä–∞—Ç 500x500\n"
        f"<code>800 600 #FF0000</code> - –∫—Ä–∞—Å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫\n\n"
        "‚ùì –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —á–∞—Ç",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ù–∞–∑–∞–¥")],  # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            ],
            resize_keyboard=True
        )
    )
    await state.set_state(ImageGeneratorStates.waiting_for_params)

async def process_image_params(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await generate_image_command(message, state)
        return
    elif message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer(WELCOME_MSG, reply_markup=get_main_menu())
        return
    
    try:
        data = await state.get_data()
        ext = data['format']
        parts = message.text.split()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if len(parts) == 1:
            if parts[0].startswith('#'):
                raise ValueError("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä, –∑–∞—Ç–µ–º —Ü–≤–µ—Ç")
            size = int(parts[0])
            width = height = size
            color = DEFAULT_COLOR
        elif len(parts) == 2:
            if parts[1].startswith('#'):
                size = int(parts[0])
                width = height = size
                hex_color = parts[1]
            else:
                width = int(parts[0])
                height = int(parts[1])
                color = DEFAULT_COLOR
        elif len(parts) == 3:
            width = int(parts[0])
            height = int(parts[1])
            hex_color = parts[2]
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

        if 'hex_color' in locals():
            if not re.match(r'^#(?:[0-9a-fA-F]{3}){1,2}$', hex_color):
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX (–Ω–∞–ø—Ä–∏–º–µ—Ä: #FF5733)")
            hex_color = hex_color.lstrip('#')
            color = tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))

        if width <= 0 or height <= 0:
            raise ValueError("–†–∞–∑–º–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏")
        if width > MAX_SIZE or height > MAX_SIZE:
            raise ValueError(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {MAX_SIZE}px")
        
        img = Image.new('RGB', (width, height), color=color)
        d = ImageDraw.Draw(img)
        
        try:
            font = ImageFont.truetype("arial.ttf", size=min(width, height)//10)
        except:
            font = ImageFont.load_default()
        
        text = f"{width}x{height}\n.{ext}"
        text_bbox = d.textbbox((0, 0), text, font=font)
        x = (width - (text_bbox[2] - text_bbox[0])) / 2
        y = (height - (text_bbox[3] - text_bbox[1])) / 2
        d.text((x, y), text, font=font, fill=TEXT_COLOR)
        
        img_byte_arr = io.BytesIO()
        img.save(img_byte_arr, format=ext if ext != 'jpg' else 'JPEG')
        
        await message.answer_photo(
            photo=BufferedInputFile(
                file=img_byte_arr.getvalue(),
                filename=f"image_{width}x{height}.{ext}"
            ),
            caption=f"‚úÖ –ì–æ—Ç–æ–≤–æ! {width}x{height}.{ext}"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –µ—â—ë")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
            reply_markup=keyboard
        )
        await state.set_state(ImageGeneratorStates.waiting_for_choice)
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
    except Exception as e:
        logger.error(f"Image generation error: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        await state.clear()

async def handle_choice(message: Message, state: FSMContext):
    if message.text == "–°–æ–∑–¥–∞—Ç—å –µ—â—ë":
        await generate_image_command(message, state)
    elif message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        from messages import MENU_MSG, get_main_menu
        await message.answer(MENU_MSG, reply_markup=get_main_menu())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MENU_MSG
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")