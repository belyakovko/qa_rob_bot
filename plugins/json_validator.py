from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
import json
import logging
from messages import get_main_menu, get_back_menu

logger = logging.getLogger(__name__)

class JsonValidatorStates(StatesGroup):
    waiting_for_json = State()
    waiting_for_repeat = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

async def json_validator_command(message: Message, state: FSMContext):
    await state.set_state(JsonValidatorStates.waiting_for_json)
    await message.answer(
        "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä:\n"
        "<code>{\n  \"name\": \"John\",\n  \"age\": 30,\n  \"city\": \"New York\"\n}</code>\n\n"
        "–Ø –ø—Ä–æ–≤–µ—Ä—é:\n"
        "1. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞\n"
        "2. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)\n"
        "3. –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )

async def process_json_validation(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer(WELCOME_MSG, reply_markup=get_main_menu())
        return
    
    json_text = message.text
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
        parsed = json.loads(json_text)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
        formatted_json = json.dumps(parsed, indent=2, ensure_ascii=False)
        
        await message.answer(
            "‚úÖ <b>JSON –≤–∞–ª–∏–¥–µ–Ω!</b>\n\n"
            "<b>–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON:</b>\n"
            f"<code>{formatted_json}</code>",
            parse_mode="HTML"
        )
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω JSON
        await ask_for_repeat(message, state)
        
    except json.JSONDecodeError as e:
        error_msg = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤ JSON:</b>\n"
            f"‚Ä¢ –°—Ç—Ä–æ–∫–∞: {e.lineno}\n"
            f"‚Ä¢ –ö–æ–ª–æ–Ω–∫–∞: {e.colno}\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–µ: {e.msg}\n\n"
            f"<b>–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —É—á–∞—Å—Ç–æ–∫:</b>\n"
            f"<code>{json_text[max(0, e.pos-20):e.pos+20]}</code>"
        )
        await message.answer(
            error_msg,
            parse_mode="HTML"
        )
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞
        await ask_for_repeat(message, state)
        
    except Exception as e:
        logger.error(f"JSON validation error: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON",
            reply_markup=get_back_menu()
        )
        await state.clear()

async def ask_for_repeat(message: Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω JSON"""
    repeat_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ JSON")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω JSON?",
        reply_markup=repeat_keyboard
    )
    await state.set_state(JsonValidatorStates.waiting_for_repeat)

async def process_repeat_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    if message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ JSON":
        await json_validator_command(message, state)
    elif message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer(MENU_MSG, reply_markup=get_main_menu())
        return
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")