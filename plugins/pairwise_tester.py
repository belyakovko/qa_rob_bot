from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from allpairspy import AllPairs
import logging
from itertools import product
from messages import MENU_MSG, get_main_menu, get_back_menu

logger = logging.getLogger(__name__)

class PairwiseStates(StatesGroup):
    waiting_for_parameters = State()
    waiting_for_action = State()

async def pairwise_command(message: Message, state: FSMContext):
    await state.set_state(PairwiseStates.waiting_for_parameters)
    await message.answer(
        "üìä –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è pairwise —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ø–∞—Ä–∞–º–µ—Ç—Ä1: –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2; –ø–∞—Ä–∞–º–µ—Ç—Ä2: –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2</code>\n\n"
        "üìã –ü—Ä–∏–º–µ—Ä:\n"
        "<code>os: mac, win; size: 1000, 1200; browser: chrome, firefox</code>\n\n"
        "–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'",
        parse_mode="HTML",
        reply_markup=get_back_menu()
    )

async def process_pairwise_parameters(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer(MENU_MSG, reply_markup=get_main_menu())
        return
    
    try:
        parameters = {}
        input_text = message.text.strip()
        param_blocks = [block.strip() for block in input_text.split(';') if block.strip()]
        
        for block in param_blocks:
            if ':' not in block:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–∞—Ä–∞–º–µ—Ç—Ä: –∑–Ω–∞—á–µ–Ω–∏–µ1, –∑–Ω–∞—á–µ–Ω–∏–µ2'",
                    reply_markup=get_back_menu()
                )
                return
                
            param_name, values_str = block.split(':', 1)
            param_name = param_name.strip()
            values = [v.strip() for v in values_str.split(',') if v.strip()]
            
            if not param_name or not values:
                await message.answer(
                    "‚ùå –û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä –∏ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏",
                    reply_markup=get_back_menu()
                )
                return
                
            parameters[param_name] = values
        
        if len(parameters) < 2:
            await message.answer(
                "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è pairwise —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                reply_markup=get_back_menu()
            )
            return
        
        pairwise_combinations = list(AllPairs(parameters.values()))
        all_combinations_count = len(list(product(*parameters.values())))
        
        await state.update_data(
            parameters=parameters,
            pairwise_combinations=pairwise_combinations,
            all_combinations_count=all_combinations_count
        )
        
        report = (
            f"üîπ <b>Pairwise —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</b>\n\n"
            f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã ({len(parameters)}):</b>\n" +
            "\n".join(f"‚Ä¢ {param}: {', '.join(values)}" for param, values in parameters.items()) +
            f"\n\n<b>–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤:</b> {len(pairwise_combinations)} –∏–∑ {all_combinations_count}\n\n"
            f"<b>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:</b>\n" +
            "\n".join(
                f"{i}. " + ", ".join(f"{param}: {value}" for param, value in zip(parameters.keys(), combo))
                for i, combo in enumerate(pairwise_combinations, 1)
            )
        )
        
        await message.answer(report, parse_mode="HTML")
        
        action_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫")],
                [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")],
                [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
            ],
            resize_keyboard=True
        )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)
        await state.set_state(PairwiseStates.waiting_for_action)
        
    except Exception as e:
        logger.error(f"Pairwise error: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.",
            reply_markup=get_back_menu()
        )
        await state.clear()

async def process_pairwise_action(message: Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer(MENU_MSG, reply_markup=get_main_menu())
        return
    
    data = await state.get_data()
    parameters = data['parameters']
    pairwise_combinations = data['pairwise_combinations']
    all_combinations_count = data['all_combinations_count']
    
    if message.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã":
        await pairwise_command(message, state)
        return
    
    elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫":
        all_combinations = list(product(*parameters.values()))
        
        report = (
            f"üîπ <b>–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π ({len(all_combinations)}):</b>\n\n" +
            "\n".join(
                f"{i}. " + ", ".join(f"{param}: {value}" for param, value in zip(parameters.keys(), combo))
                for i, combo in enumerate(all_combinations, 1)
            )
        )
        
        max_length = 4000
        for i in range(0, len(report), max_length):
            await message.answer(report[i:i+max_length], parse_mode="HTML")
        
    elif message.text == "–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã":
        report = (
            f"üîπ <b>–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã ({len(pairwise_combinations)} –∏–∑ {all_combinations_count}):</b>\n\n" +
            "\n".join(
                f"{i}. " + ", ".join(f"{param}: {value}" for param, value in zip(parameters.keys(), combo))
                for i, combo in enumerate(pairwise_combinations, 1)
            )
        )
        await message.answer(report, parse_mode="HTML")
    
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏")
        return
    
    # –ü–æ—Å–ª–µ –ª—é–±–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    action_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã")],
            [KeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=action_keyboard)