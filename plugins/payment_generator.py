from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import random
import logging
from messages import get_main_menu

logger = logging.getLogger(__name__)

class PaymentGeneratorStates(StatesGroup):
    waiting_for_payment_system = State()

PAYMENT_SYSTEMS = ['Visa', 'Mastercard', 'UnionPay', 'JCB', 'Mir']

async def generate_payment_command(message: Message, state: FSMContext):
    await state.clear()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Å–∏—Å—Ç–µ–º–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    builder = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=system)] for system in PAYMENT_SYSTEMS
        ] + [
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É:",
        reply_markup=builder
    )
    await state.set_state(PaymentGeneratorStates.waiting_for_payment_system)

async def process_payment_system(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    if message.text == "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        await state.clear()
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ QA Helper Bot! ü§ñ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç:",
            reply_markup=get_main_menu()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
    if message.text not in PAYMENT_SYSTEMS:
        await message.answer(
            "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–∑ —Å–ø–∏—Å–∫–∞",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text=system)] for system in PAYMENT_SYSTEMS
                ] + [
                    [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
                ],
                resize_keyboard=True
            )
        )
        return
    
    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        card_number = generate_card_number(message.text)
        expiry_date = f"{random.randint(1, 12):02d}/{random.randint(23, 30)}"
        cvv = f"{random.randint(0, 999):03d}"
        
        await message.answer(
            "üîπ <b>–¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>\n\n"
            f"‚ñ™ <b>–°–∏—Å—Ç–µ–º–∞:</b> {message.text}\n"
            f"‚ñ™ <b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> <code>{card_number}</code>\n"
            f"‚ñ™ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {expiry_date}\n"
            f"‚ñ™ <b>CVV/CVC:</b> <code>{cvv}</code>\n\n"
            "<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è QA-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>",
            parse_mode="HTML",
            reply_markup=get_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Payment data error: {e}", exc_info=True)
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=get_main_menu()
        )
    
    await state.clear()

def generate_card_number(system: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É –õ—É–Ω–∞"""
    prefixes = {
        'Visa': ['4'],
        'Mastercard': ['51', '52', '53', '54', '55'],
        'UnionPay': ['62'],
        'JCB': ['35'],
        'Mir': ['2']
    }
    
    prefix = random.choice(prefixes.get(system, ['4']))
    number = prefix
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞
    while len(number) < 15:
        number += str(random.randint(0, 9))
    
    # –†–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    total = 0
    for i, digit in enumerate(number):
        digit = int(digit)
        if i % 2 == 0:
            digit *= 2
            if digit > 9:
                digit -= 9
        total += digit
    
    check_digit = (10 - (total % 10)) % 10
    return number + str(check_digit)